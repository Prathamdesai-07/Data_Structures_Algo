#include <stdio.h>
#include<stdlib.h>
// creating the structure
struct Node{
    int value;
    struct Node *next;
}Node;
// inserting the front
void insert_front(struct Node **start_ref, int data){
    // making a temp variable
    struct Node* ptr1=(struct Node*)malloc(sizeof(struct Node));
    // adding the value to given temp
    ptr1->value=data;
    // pointing to the last made node
    ptr1->next=*start_ref;
    // making new made node as the first node
    *start_ref=ptr1;
}
// to delete at front
void delete_front(struct Node** ptr){
    // creating a temp node to display the value of the deleting node
    struct Node* ptr1;
    ptr1=*ptr;
    *ptr=(*ptr)->next;
    printf("the data of the first node is:%d\n", ptr1->value);
    // garbage collection 
    free(ptr1); 
}
// inserting at the end
void insert_end(struct Node** start_ref, int data){
    // creating a new node to set the data in it
    struct Node* new_node=(struct Node*)malloc(sizeof(struct Node));
    new_node->value=data;
    // temp node to point at the starting node of SLL
    struct Node* temp=*start_ref;
    // setting the linking part of the node to null as its the last node
    new_node->next=NULL;
    // if SLL is empty
    if(*start_ref==NULL){
        *start_ref=new_node;
        return;
    }
    // if its isn't
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=new_node;
}

void delete_end(struct Node** ptr){
    // if the SLL is already empty 
    if((*ptr)==NULL){
        printf("THE LIST IS ALREADY EMPTY!!");
    }
    // if its isn't 
    else if((*ptr)->next==NULL){
        // if there is only one node 
        free(*ptr);
        (*ptr)=NULL;
    }
    else{
        struct Node* temp=(*ptr);
        struct Node* temp1=(*ptr);
        while(temp->next!=NULL){
            temp1=temp;
            temp=temp->next;
        }
        temp1->next=NULL;
        free(temp);
        temp=NULL;
    }
}
// search operation
void search(struct Node* ptr,int val){
    int i=1,flag=0;
    while(ptr!=NULL){
        if(ptr->value==val){
            printf("%d", i);
            flag=1;
        }
        ptr=ptr->next;
        i++;
    }
    if(flag==0){
        printf("INVALID!!");
    }
}
void print(struct Node *start){
    while(start!=NULL){
        printf("%d\n", start->value);
        start=start->next;
    }
}
void main(){
    int arr[]={1,2,3,4,5,6,7,8,9};
    struct Node* start=NULL;
    for(int i=0; i<9; i++){
    insert_end(&start,arr[i]);
    }
    print(start);
    search(start,6);
    delete_front(&start);
    print(start);
    delete_end(&start);   
    print(start);
}
